{
  "tag": "Report Webservice",
  "description": "API endpoints for Report Webservice",
  "paths": {
    "/api/report/getAuditFeed": {
      "post": {
        "description": "Get the latest audit logs for organization",
        "operationId": "getAuditFeed",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetAuditFeedWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetAuditFeedWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get audit feed",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getCountReport": {
      "post": {
        "deprecated": true,
        "description": "Use /getCountReportV2 instead",
        "operationId": "getCountReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetCountReportWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetCountReportWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get count report",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getCountReportV2": {
      "post": {
        "description": "Get the specified count reports",
        "operationId": "getCountReportV2",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetCountReportV2WSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetCountReportWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get count report V2",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getCountReports": {
      "post": {
        "description": "Get multiple specified count reports",
        "operationId": "getCountReports",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetCountReportsWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetCountReportsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get count reports",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getCountReportsForDevicesAtLocation": {
      "post": {
        "description": "Get count reports by device for a specified location",
        "operationId": "getCountReportsForDevicesAtLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetCountReportsForDevicesAtLocationWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetCountReportsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get count reports for devices at location",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getCustomEventsBinaryCounts": {
      "post": {
        "description": "Retrieves aggregated counts of boolean event values (true/false) produced by a selected prompt over a specified time window.\n\nScope & filters:\n\t•\tpromptUuid – The prompt to aggregate (required).\n\nTime window & interval:\n\t•\tA time range (startTimeMs → endTimeMs, epoch ms) is required and is used exactly as provided.\n\t•\tIf an interval is supplied (e.g., MINUTELY, QUARTERHOURLY, HOURLY), events are bucketed at that granularity.\n\t•\tAggregation is always performed in the device’s local timezone. Buckets are computed relative to each device’s timezone, then evaluated within the exact provided window.\n\nResponse:\n\t•\tPer interval bucket, returns a BinaryAggregationValue with counts for true and false.\n\t•\tIncludes minValueTimestampMs and maxValueTimestampMs (if available) and the bucket timestamp from BaseReportValue.\n\nNotes:\n\t•\tOnly binary/boolean prompt types are valid for this endpoint.\n",
        "operationId": "getCustomEventsBinaryCounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetCustomLLMWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetCustomLLMWBinaryWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get custom events aggregation binary counts",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getCustomEventsNumericCounts": {
      "post": {
        "description": "Retrieves aggregated statistics for numeric events event values produced by a selected prompt over a specified time window.\nScope & filters:\n\t•\tpromptUuid – The prompt to aggregate (required).\n\nTime window & interval:\n\t•\tA time range (startTimeMs → endTimeMs, epoch ms) is required and is used exactly as provided.\n\t•\tIf an interval is supplied (e.g., MINUTELY, QUARTERHOURLY, HOURLY), events are bucketed at that granularity.\n\t•\tAggregation is always performed in the device’s local timezone. Buckets are computed relative to each device’s timezone, then evaluated within the exact provided window.\n\nResponse:\n\t•\tPer interval bucket, returns numeric aggregates derived from raw values: count, sum, min, max, average.\n\t•\tIncludes minValueTimestampMs and maxValueTimestampMs indicating when min/max occurred within the bucket (if available).\n\t•\tBucket timestamps are returned as epoch ms.\n\nNotes:\n\t•\tOnly numeric prompt types are valid for this endpoint.\n",
        "operationId": "getCustomEventsNumericCounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetCustomLLMWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetCustomLLMNumericWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get custom events aggregation numeric counts",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getCustomEventsReport": {
      "post": {
        "description": "Retrieves a custom events report containing raw time-series event values recorded by selected prompts and devices within the specified time window.\nThe report can be filtered by:\n\t•\tpromptUuid – The specific prompt to query.\n\t•\tdeviceFacetUuids – A set of devices to include.\n\t•\tlocationUuid – The location context for the query.\nFor example, a request may specify a promptUuid to fetch results from a certain LLM prompt, and additionally restrict results to only devices in a given locationUuid.\nThe time range (startTimeMs → endTimeMs) is required and determines the interval of events returned.\nThe response includes, per device and prompt, the raw event values (numeric or boolean as string) along with timestamps, check-condition results (if selected), and prompt type.",
        "operationId": "getCustomEventsReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetCustomLLMReportWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetCustomLLMNumericWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get custom events report",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getDiagnosticFeed": {
      "post": {
        "description": "Get the latest diagnostic logs for organization",
        "operationId": "getDiagnosticFeed",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetDiagnosticFeedWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetDiagnosticFeedWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get diagnostic feed",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getEnvoyDeliveries": {
      "post": {
        "description": "Get a list of deliveries from Envoy to populate reporting logs",
        "operationId": "getEnvoyDeliveries",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration_GetEnvoyDeliveriesWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration_GetEnvoyDeliveriesWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get Envoy deliveries",
        "tags": [
          "Integrations Webservice",
          "Report Webservice"
        ]
      }
    },
    "/api/report/getEnvoyEmployees": {
      "post": {
        "description": "Get a list of employees from Envoy",
        "operationId": "getEnvoyEmployees",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration_GetEnvoyEmployeesWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration_GetEnvoyEmployeesWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get Envoy employees",
        "tags": [
          "Integrations Webservice",
          "Report Webservice"
        ]
      }
    },
    "/api/report/getEnvoyLocations": {
      "post": {
        "description": "Get list of Envoy locations",
        "operationId": "getEnvoyLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration_GetEnvoyLocationsWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration_GetEnvoyLocationsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get Envoy locations",
        "tags": [
          "Integrations Webservice",
          "Report Webservice"
        ]
      }
    },
    "/api/report/getEnvoyVisitors": {
      "post": {
        "description": "Get a list of visitors from Envoy to populate reporting logs",
        "operationId": "getEnvoyVisitors",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration_GetEnvoyVisitorsWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration_GetEnvoyVisitorsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get Envoy visitors",
        "tags": [
          "Integrations Webservice",
          "Report Webservice"
        ]
      }
    },
    "/api/report/getIntegrationDiagnosticEvents": {
      "post": {
        "description": "Get the diagnostic logs of supported third-party devices for organization",
        "operationId": "getIntegrationDiagnosticEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration_GetIntegrationDiagnosticEventsWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration_GetIntegrationDiagnosticEventsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get integration diagnostic events",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getLicensePlatesByDevice": {
      "post": {
        "description": "Get license plate counting events for a specified camera",
        "operationId": "getLicensePlatesByDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetLicensePlatesByDeviceWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetLicensePlatesByDeviceWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get license plates by device",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getMostRecentPeopleCountEvents": {
      "post": {
        "description": "Get the X most recent people counting events for a specified device",
        "operationId": "getMostRecentPeopleCountEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetMostRecentPeopleCountWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetMostRecentPeopleCountWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get most recent people count events",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getOccupancyCounts": {
      "post": {
        "description": "Returns the estimated occupancy count for a specified room or area within a given time range. This endpoint allows you to monitor occupancy trends over time or retrieve a single count for a defined interval.\nImportant: An occupancy region must be defined in the Rhombus Console before using this endpoint.\nYou can optionally specify an interval (e.g., MINUTELY, QUARTERHOURLY, HOURLY ...) to retrieve occupancy counts broken down by sub-intervals between startTime and endTime.\nIf no interval is provided, a single occupancy count is returned for the entire duration between startTime and endTime.",
        "operationId": "getOccupancyCounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetOccupancyCountsWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetOccupancyCountsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get occupancy counts",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getProximityTagLocationsByDate": {
      "post": {
        "description": "Get proximity tag locations by date",
        "operationId": "getProximityTagLocationsByDate",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetProximityTagLocationsByDateWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetProximityTagLocationsByDateWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get proximity tag locations by date",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getRunningAverage": {
      "post": {
        "description": "Get the running average for the specified count report if it is available, based on recent data",
        "operationId": "getRunningAverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetRunningAverageWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetRunningAverageWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get running average",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getSummaryCountReport": {
      "post": {
        "description": "Get a summary report for a camera, location, or organization",
        "operationId": "getSummaryCountReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetSummaryCountReportWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetSummaryCountReportWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get summary count report",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getThresholdCrossingCountReport": {
      "post": {
        "description": "Get threshold crossing count report",
        "operationId": "getThresholdCrossingCountReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetThresholdCrossingCountReportWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetThresholdCrossingCountReportWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get threshold crossing count report",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getThresholdCrossingCounts": {
      "post": {
        "deprecated": true,
        "description": "Get the occupancy counts from threshold crossing for a group of cameras over a period of time",
        "operationId": "getThresholdCrossingCounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetThresholdCrossingCountsWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetThresholdCrossingCountsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get threshold crossing counts",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getThresholdCrossingEvents": {
      "post": {
        "description": "Get the raw threshold crossing events for a group of cameras over a period of time",
        "operationId": "getThresholdCrossingEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetThresholdCrossingEventsWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetThresholdCrossingEventsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get threshold crossing events",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getThresholdCrossingEventsForDevice": {
      "post": {
        "description": "Get threshold crossing events for device",
        "operationId": "getThresholdCrossingEventsForDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_GetThresholdCrossingEventsForDeviceWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_GetThresholdCrossingEventsForDeviceWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get threshold crossing events for device",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getToastEventsTable": {
      "post": {
        "description": "Get list of Toast orders to populate events table",
        "operationId": "getToastEventsTable",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration_GetToastEventsTableWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration_GetToastEventsTableWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get Toast events table",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/getToastEventsTableAllLocations": {
      "post": {
        "description": "Get list of Toast orders from all restaurants to populate events table",
        "operationId": "getToastEventsTableAllLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration_GetToastEventsTableAllLocationsWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration_GetToastEventsTableAllLocationsWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get Toast events table all locations",
        "tags": [
          "Report Webservice"
        ]
      }
    },
    "/api/report/resetRunningAverage": {
      "post": {
        "description": "Reset the running average for the specified count report",
        "operationId": "resetRunningAverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAuthSchemeParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Report_ResetRunningAverageWSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_ResetRunningAverageWSResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Reset running average",
        "tags": [
          "Report Webservice"
        ]
      }
    }
  },
  "endpoints": [
    {
      "path": "/api/report/getAuditFeed",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getCountReport",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getCountReportV2",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getCountReports",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getCountReportsForDevicesAtLocation",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getCustomEventsBinaryCounts",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getCustomEventsNumericCounts",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getCustomEventsReport",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getDiagnosticFeed",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getEnvoyDeliveries",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getEnvoyEmployees",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getEnvoyLocations",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getEnvoyVisitors",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getIntegrationDiagnosticEvents",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getLicensePlatesByDevice",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getMostRecentPeopleCountEvents",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getOccupancyCounts",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getProximityTagLocationsByDate",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getRunningAverage",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getSummaryCountReport",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getThresholdCrossingCountReport",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getThresholdCrossingCounts",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getThresholdCrossingEvents",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getThresholdCrossingEventsForDevice",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getToastEventsTable",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/getToastEventsTableAllLocations",
      "methods": [
        "post"
      ]
    },
    {
      "path": "/api/report/resetRunningAverage",
      "methods": [
        "post"
      ]
    }
  ],
  "endpointCount": 27,
  "referencedSchemas": [
    "Integration_GetEnvoyDeliveriesWSRequest",
    "Integration_GetEnvoyDeliveriesWSResponse",
    "Integration_GetEnvoyEmployeesWSRequest",
    "Integration_GetEnvoyEmployeesWSResponse",
    "Integration_GetEnvoyLocationsWSRequest",
    "Integration_GetEnvoyLocationsWSResponse",
    "Integration_GetEnvoyVisitorsWSRequest",
    "Integration_GetEnvoyVisitorsWSResponse",
    "Integration_GetIntegrationDiagnosticEventsWSRequest",
    "Integration_GetIntegrationDiagnosticEventsWSResponse",
    "Integration_GetToastEventsTableAllLocationsWSRequest",
    "Integration_GetToastEventsTableAllLocationsWSResponse",
    "Integration_GetToastEventsTableWSRequest",
    "Integration_GetToastEventsTableWSResponse",
    "Report_GetAuditFeedWSRequest",
    "Report_GetAuditFeedWSResponse",
    "Report_GetCountReportV2WSRequest",
    "Report_GetCountReportWSRequest",
    "Report_GetCountReportWSResponse",
    "Report_GetCountReportsForDevicesAtLocationWSRequest",
    "Report_GetCountReportsWSRequest",
    "Report_GetCountReportsWSResponse",
    "Report_GetCustomLLMNumericWSResponse",
    "Report_GetCustomLLMReportWSRequest",
    "Report_GetCustomLLMWBinaryWSResponse",
    "Report_GetCustomLLMWSRequest",
    "Report_GetDiagnosticFeedWSRequest",
    "Report_GetDiagnosticFeedWSResponse",
    "Report_GetLicensePlatesByDeviceWSRequest",
    "Report_GetLicensePlatesByDeviceWSResponse",
    "Report_GetMostRecentPeopleCountWSRequest",
    "Report_GetMostRecentPeopleCountWSResponse",
    "Report_GetOccupancyCountsWSRequest",
    "Report_GetOccupancyCountsWSResponse",
    "Report_GetProximityTagLocationsByDateWSRequest",
    "Report_GetProximityTagLocationsByDateWSResponse",
    "Report_GetRunningAverageWSRequest",
    "Report_GetRunningAverageWSResponse",
    "Report_GetSummaryCountReportWSRequest",
    "Report_GetSummaryCountReportWSResponse",
    "Report_GetThresholdCrossingCountReportWSRequest",
    "Report_GetThresholdCrossingCountReportWSResponse",
    "Report_GetThresholdCrossingCountsWSRequest",
    "Report_GetThresholdCrossingCountsWSResponse",
    "Report_GetThresholdCrossingEventsForDeviceWSRequest",
    "Report_GetThresholdCrossingEventsForDeviceWSResponse",
    "Report_GetThresholdCrossingEventsWSRequest",
    "Report_GetThresholdCrossingEventsWSResponse",
    "Report_ResetRunningAverageWSRequest",
    "Report_ResetRunningAverageWSResponse"
  ]
}
