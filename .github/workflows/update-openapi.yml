name: Update OpenAPI Spec

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-openapi:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: docs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Fetch and validate OpenAPI spec
        id: fetch
        run: |
          echo "🔄 Fetching latest OpenAPI spec from Rhombus API..."
          echo "📡 Source: https://api2.rhombussystems.com/api/openapi/public.json"

          # Create backup of current spec
          if [ -f "api-reference/openapi.json" ]; then
            cp api-reference/openapi.json api-reference/openapi.json.backup
            echo "📋 Created backup"
          fi

          # Download the latest spec
          HTTP_CODE=$(curl -s -w "%{http_code}" -o api-reference/openapi.json https://api2.rhombussystems.com/api/openapi/public.json)

          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Failed to download OpenAPI spec (HTTP $HTTP_CODE)"
            if [ -f "api-reference/openapi.json.backup" ]; then
              mv api-reference/openapi.json.backup api-reference/openapi.json
            fi
            exit 1
          fi

          echo "✅ Successfully downloaded OpenAPI spec"

          # Validate it's valid JSON
          if ! jq empty api-reference/openapi.json 2>/dev/null; then
            echo "❌ Downloaded spec is not valid JSON, restoring backup"
            if [ -f "api-reference/openapi.json.backup" ]; then
              mv api-reference/openapi.json.backup api-reference/openapi.json
            fi
            exit 1
          fi

          echo "✅ OpenAPI spec is valid JSON"

          # Extract and display spec info
          TITLE=$(jq -r '.info.title // "Unknown"' api-reference/openapi.json)
          VERSION=$(jq -r '.info.version // "Unknown"' api-reference/openapi.json)
          PATHS_COUNT=$(jq '.paths | length' api-reference/openapi.json)

          echo "📊 API Info:"
          echo "   Title: $TITLE"
          echo "   Version: $VERSION"
          echo "   Endpoints: $PATHS_COUNT"

          # Save stats for summary
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "endpoints=$PATHS_COUNT" >> $GITHUB_OUTPUT

          # Remove backup if successful
          rm -f api-reference/openapi.json.backup

      - name: Check for changes
        id: check-changes
        run: |
          # Check if OpenAPI spec changed
          if git diff --quiet api-reference/openapi.json; then
            echo "No changes detected in OpenAPI spec"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in OpenAPI spec"
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "changed_count=1" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Pull latest changes to avoid conflicts
          git pull --rebase origin main || true

          # Add all changed files in api-reference
          git add api-reference/

          # Create commit with details
          git commit -m "chore: update OpenAPI spec from Rhombus API ($(date -u +%Y-%m-%d))" \
                     -m "API Title: ${{ steps.fetch.outputs.title }}" \
                     -m "API Version: ${{ steps.fetch.outputs.version }}" \
                     -m "Total Endpoints: ${{ steps.fetch.outputs.endpoints }}" \
                     -m "Files Changed: ${{ steps.check-changes.outputs.changed_count }}" \
                     -m "Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          # Push changes with retry logic
          for i in {1..3}; do
            if git push origin main; then
              echo "✅ Successfully pushed changes"
              break
            else
              if [ $i -lt 3 ]; then
                echo "⚠️  Push failed, retrying in 5 seconds... (attempt $i/3)"
                sleep 5
                git pull --rebase origin main
              else
                echo "❌ Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: Create summary
        if: always()
        run: |
          echo "# OpenAPI Spec Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-changes.outputs.changes }}" == "true" ]; then
            echo "✅ **Status**: OpenAPI spec updated successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Specification Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Title**: ${{ steps.fetch.outputs.title }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ steps.fetch.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Endpoints**: ${{ steps.fetch.outputs.endpoints }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Files Changed**: ${{ steps.check-changes.outputs.changed_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Updated on**: $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Sample of Changed Files" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "api-reference/openapi.json" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Status**: No changes detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Current Specification" >> $GITHUB_STEP_SUMMARY
            echo "- **Title**: ${{ steps.fetch.outputs.title }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ steps.fetch.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Endpoints**: ${{ steps.fetch.outputs.endpoints }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Checked on**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Source" >> $GITHUB_STEP_SUMMARY
          echo "🔗 https://api2.rhombussystems.com/api/openapi/public.json" >> $GITHUB_STEP_SUMMARY