# Rhombus Developer Documentation - Complete Reference

This is the comprehensive reference for the Rhombus Developer Documentation project, a Mintlify-based documentation site providing complete API documentation for the Rhombus security platform.

## Project Overview

### Mission & Purpose
The Rhombus Developer Documentation serves as the primary resource for developers integrating with Rhombus security infrastructure. It provides comprehensive API documentation, interactive examples, and development resources for building applications that leverage Rhombus cameras, sensors, access control systems, and analytics.

### Target Audience
- **API Developers**: Building integrations with Rhombus security platform
- **System Integrators**: Connecting Rhombus with existing security systems
- **Enterprise Developers**: Creating custom security applications
- **Partner Developers**: Building solutions on the Rhombus platform

### Platform Details
- **Framework**: Mintlify documentation platform
- **Language**: MDX (Markdown with JSX components)
- **Deployment**: Automatic via Mintlify GitHub app integration
- **API Coverage**: 207+ endpoints across multiple service categories
- **Update Frequency**: Nightly automated sync with production API

## Technical Architecture

### Project Structure
```
docs/
├── .github/
│   └── workflows/
│       ├── update-openapi.yml          # Nightly API spec updates
│       └── update-llms-files.yml       # LLMs context file updates
├── .windsurf/
│   └── rules.md                        # Windsurf AI editor rules
├── api-reference/
│   ├── endpoint/                       # Generated API endpoint docs
│   │   ├── access-control-integrations/                     # Access Control Integrations endpoints (75)
│   │   ├── access-control/                     # Access Control endpoints (62)
│   │   ├── camera/                     # Camera endpoints (61)
│   │   ├── component/                     # Component endpoints (58)
│   │   ├── policy/                     # Policy endpoints (49)
│   │   ├── event/                     # Event endpoints (42)
│   │   ├── org/                     # Org endpoints (42)
│   │   ├── incident-management-integrations/                     # Incident Management Integrations endpoints (34)
│   │   ├── integrations/                     # Integrations endpoints (34)
│   │   ├── report/                     # Report endpoints (24)
│   │   ├── partner/                     # Partner endpoints (21)
│   │   ├── video/                     # Video endpoints (19)
│   │   ├── storage-integrations/                     # Storage Integrations endpoints (18)
│   │   ├── lockdown-plan/                     # Lockdown Plan endpoints (17)
│   │   ├── export/                     # Export endpoints (16)
│   │   ├── service-management-integrations/                     # Service Management Integrations endpoints (14)
│   │   ├── location/                     # Location endpoints (13)
│   │   ├── climate/                     # Climate endpoints (12)
│   │   ├── license/                     # License endpoints (12)
│   │   ├── schedule/                     # Schedule endpoints (12)
│   │   ├── user/                     # User endpoints (12)
│   │   ├── vehicle/                     # Vehicle endpoints (12)
│   │   ├── relay/                     # Relay endpoints (11)
│   │   ├── audiogateway/                     # Audiogateway endpoints (10)
│   │   ├── doorbell-camera/                     # Doorbell Camera endpoints (10)
│   │   ├── iot-integrations/                     # Iot Integrations endpoints (10)
│   │   ├── permission/                     # Permission endpoints (10)
│   │   ├── alert-monitoring/                     # Alert Monitoring endpoints (9)
│   │   ├── face-recognition-matchmaker/                     # Face Recognition Matchmaker endpoints (9)
│   │   ├── button/                     # Button endpoints (8)
│   │   ├── face-recognition-person/                     # Face Recognition Person endpoints (8)
│   │   ├── rules/                     # Rules endpoints (8)
│   │   ├── help/                     # Help endpoints (7)
│   │   ├── user-metadata/                     # User Metadata endpoints (7)
│   │   ├── webhook-integrations/                     # Webhook Integrations endpoints (7)
│   │   ├── audioplayback/                     # Audioplayback endpoints (6)
│   │   ├── customer/                     # Customer endpoints (6)
│   │   ├── oauth/                     # Oauth endpoints (6)
│   │   ├── upload/                     # Upload endpoints (6)
│   │   ├── alarm-monitoring-keypad/                     # Alarm Monitoring Keypad endpoints (5)
│   │   ├── feature/                     # Feature endpoints (5)
│   │   ├── developer/                     # Developer endpoints (4)
│   │   ├── door/                     # Door endpoints (4)
│   │   ├── face-recognition-event/                     # Face Recognition Event endpoints (4)
│   │   ├── occupancy/                     # Occupancy endpoints (4)
│   │   ├── org-integrations/                     # Org Integrations endpoints (4)
│   │   ├── proximity/                     # Proximity endpoints (4)
│   │   ├── search/                     # Search endpoints (4)
│   │   ├── logistics/                     # Logistics endpoints (3)
│   │   ├── rules-records/                     # Rules Records endpoints (3)
│   │   ├── sensor/                     # Sensor endpoints (3)
│   │   ├── tvos-config/                     # Tvos Config endpoints (3)
│   │   ├── badge-reader/                     # Badge Reader endpoints (2)
│   │   ├── device-config/                     # Device Config endpoints (2)
│   │   ├── door-controller/                     # Door Controller endpoints (2)
│   │   ├── event-search/                     # Event Search endpoints (2)
│   │   ├── events/                     # Events endpoints (2)
│   │   ├── ble/                     # Ble endpoints (1)
│   │   ├── components/                     # Components endpoints (1)
│   │   ├── guest-management-kiosk/                     # Guest Management Kiosk endpoints (1)
│   │   ├── media-device/                     # Media Device endpoints (1)
│   │   ├── organization/                     # Organization endpoints (1)
│   │   ├── policies/                     # Policies endpoints (1)
│   │   ├── rapidsos/                     # Rapidsos endpoints (1)
│   │   ├── reports/                     # Reports endpoints (1)
│   │   ├── users/                     # Users endpoints (1)
│   ├── openapi-split/                 # Split OpenAPI spec files
│   │   ├── schemas/                   # API schema definitions
│   │   ├── _base.json                 # Base OpenAPI configuration
│   │   └── _index.json                # Category index
│   ├── README.md                      # API reference documentation
│   └── openapi.json                   # Complete OpenAPI specification
├── implementations/                   # Implementation examples
│   ├── video-player.mdx              # Video streaming implementation
│   ├── advanced-implementation.mdx   # Advanced patterns
│   └── webhook-listener.mdx          # Webhook integration
├── low-code-no-code/                 # No-code integration guides
│   └── zapier.mdx                    # Zapier integration
├── scripts/                          # Automation scripts
│   ├── update-openapi.sh             # Fetch & update OpenAPI spec
│   ├── split-openapi.sh              # Split spec into category files
│   └── update-llms-files.py          # Update LLMs context files
├── logo/                             # Brand assets
│   ├── dark.svg                      # Dark theme logo
│   └── light.svg                     # Light theme logo
├── images/                           # Documentation assets
├── .gitignore                        # Git ignore patterns
├── CLAUDE.md                         # Claude AI assistant guidance
├── LICENSE                           # Project license
├── README.md                         # Project overview
├── docs.json                         # Mintlify configuration
├── favicon.svg                       # Site favicon
├── index.mdx                         # Homepage
├── quickstart.mdx                    # Quick start guide
├── llms.txt                          # Concise AI context
└── llms-full.txt                     # Comprehensive AI context
```

### Configuration Details

#### Mintlify Configuration (`docs.json`)
```json
{
  "$schema": "https://mintlify.com/docs.json",
  "theme": "mint",
  "name": "Rhombus Developer Documentation",
  "colors": {
    "primary": "#2563EB",
    "light": "#60A5FA",
    "dark": "#1D4ED8"
},
  "favicon": "/favicon.svg",
  "navigation": {
    "tabs": [
      {
        "tab": "Guides",
        "groups": ["Getting started", "Implementation Examples", "Low Code / No Code"]
      },
      {
        "tab": "API reference",
        "groups": ["Core Services", "Events & Monitoring", "Integrations", "Organization & Management", "Security & Access", "Media & Video", "Automation & Rules", "Device Management", "Data & Reporting", "Developer & System", "Other Services"]
      },
    ]
  }
}
```

## API Documentation Structure

### Endpoint Distribution

### Core Services
- **Access Control**: 62 endpoints
- **Camera**: 61 endpoints
- **Component**: 58 endpoints
- **Policy**: 49 endpoints
- **Org**: 42 endpoints
- **Report**: 24 endpoints
- **Partner**: 21 endpoints
- **Video**: 19 endpoints
- **Lockdown Plan**: 17 endpoints
- **Export**: 16 endpoints
- **Location**: 13 endpoints
- **Climate**: 12 endpoints
- **License**: 12 endpoints
- **Schedule**: 12 endpoints
- **User**: 12 endpoints
- **Vehicle**: 12 endpoints
- **Audiogateway**: 10 endpoints
- **Permission**: 10 endpoints
- **Rules**: 8 endpoints
- **Help**: 7 endpoints
- **User Metadata**: 7 endpoints
- **Audioplayback**: 6 endpoints
- **Customer**: 6 endpoints
- **Oauth**: 6 endpoints
- **Upload**: 6 endpoints
- **Feature**: 5 endpoints
- **Developer**: 4 endpoints
- **Door**: 4 endpoints
- **Search**: 4 endpoints
- **Logistics**: 3 endpoints
- **Rules Records**: 3 endpoints
- **Tvos Config**: 3 endpoints
- **Device Config**: 2 endpoints
- **Door Controller**: 2 endpoints
- **Ble**: 1 endpoints
- **Components**: 1 endpoints
- **Guest Management Kiosk**: 1 endpoints
- **Media Device**: 1 endpoints
- **Organization**: 1 endpoints
- **Policies**: 1 endpoints
- **Rapidsos**: 1 endpoints
- **Reports**: 1 endpoints
- **Users**: 1 endpoints

### Events & Monitoring
- **Event**: 42 endpoints
- **Alert Monitoring**: 9 endpoints
- **Face Recognition Matchmaker**: 9 endpoints
- **Face Recognition Person**: 8 endpoints
- **Face Recognition Event**: 4 endpoints
- **Occupancy**: 4 endpoints
- **Proximity**: 4 endpoints
- **Event Search**: 2 endpoints
- **Events**: 2 endpoints

### Integrations
- **Access Control Integrations**: 75 endpoints
- **Incident Management Integrations**: 34 endpoints
- **Integrations**: 34 endpoints
- **Storage Integrations**: 18 endpoints
- **Service Management Integrations**: 14 endpoints
- **Iot Integrations**: 10 endpoints
- **Webhook Integrations**: 7 endpoints
- **Alarm Monitoring Keypad**: 5 endpoints
- **Org Integrations**: 4 endpoints

### Device Management
- **Relay**: 11 endpoints
- **Doorbell Camera**: 10 endpoints
- **Button**: 8 endpoints
- **Sensor**: 3 endpoints
- **Badge Reader**: 2 endpoints

## Development Workflow

### Local Development Setup
```bash
# Prerequisites
# - Node.js 19+
# - Git access to repository

# 1. Install Mintlify CLI
npm i -g mint

# 2. Clone and navigate to project
git clone [repository-url]
cd Developer-Documentation-Mintlify/docs

# 3. Start development server
mint dev                    # Default port 3000
mint dev --port 3333       # Custom port

# 4. Access local preview
open http://localhost:3000
```

### Maintenance Commands
```bash
# Update Mintlify CLI
mint update

# Validate documentation links
mint broken-links

# Update API specification manually
./scripts/update-openapi.sh

# Update LLMs context files
python3 scripts/update-llms-files.py
```

### Automated Workflows

#### Nightly OpenAPI Updates
**File**: `.github/workflows/update-openapi.yml`
**Schedule**: Daily at 2:00 AM UTC
**Process**:
1. Fetch latest OpenAPI spec from `https://api2.rhombussystems.com/api/openapi/public.json`
2. Compare with existing specification
3. Commit changes if updates detected
4. Split into category files for AI processing
5. Generate workflow summary

#### LLMs Context Updates
**File**: `.github/workflows/update-llms-files.yml`
**Schedule**: Daily at 3:00 AM UTC (after OpenAPI updates)
**Process**:
1. Analyze current project structure
2. Extract configuration and metadata
3. Generate updated llms.txt (concise)
4. Generate updated llms-full.txt (comprehensive)
5. Commit changes if content differs

## Content Creation Guidelines

### MDX File Structure
Every documentation page must include YAML frontmatter:
```yaml
---
title: "Descriptive Page Title"
description: "Brief, informative description for SEO and navigation"
icon: "icon-name"                    # Optional Mintlify icon
---

# Page Content
Content goes here using MDX syntax...
```

### Mintlify Component Library

#### Callout Components
```mdx
<Note>General information or context</Note>
<Tip>Helpful suggestions or best practices</Tip>
<Warning>Important cautions or potential issues</Warning>
<Info>Additional context or background information</Info>
<Check>Confirmation or success indicators</Check>
```

#### Structural Components
```mdx
<!-- Step-by-step processes -->
<Steps>
  <Step title="First Step">Content</Step>
  <Step title="Second Step">Content</Step>
</Steps>

<!-- Tabbed content -->
<Tabs>
  <Tab title="Tab 1">Content</Tab>
  <Tab title="Tab 2">Content</Tab>
</Tabs>

<!-- Collapsible sections -->
<AccordionGroup>
  <Accordion title="Section Title" icon="icon-name">
    Content
  </Accordion>
</AccordionGroup>

<!-- Card layouts -->
<CardGroup cols={2}>
  <Card title="Card Title" icon="icon-name" href="/link">
    Card description
  </Card>
</CardGroup>
```

#### Code Examples
```mdx
<!-- Multi-language code examples -->
<CodeGroup>
  ```bash cURL
  curl -X POST "https://api2.rhombussystems.com/api/endpoint" \
    -H "x-auth-apikey: YOUR_API_KEY" \
    -H "Content-Type: application/json" \
    -d '{"key": "value"}'
  ```

  ```python Python
  import requests
  headers = {"x-auth-apikey": "YOUR_API_KEY"}
  response = requests.post(
      "https://api2.rhombussystems.com/api/endpoint",
      headers=headers,
      json={"key": "value"}
  )
  ```

  ```javascript JavaScript
  const response = await fetch('https://api2.rhombussystems.com/api/endpoint', {
    method: 'POST',
    headers: {
      'x-auth-apikey': 'YOUR_API_KEY',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({key: 'value'})
  });
  ```
</CodeGroup>
```

#### API Documentation Components
```mdx
<!-- Parameter documentation -->
<ParamField path="parameter_name" type="string" required>
  Parameter description
</ParamField>

<!-- Response field documentation -->
<ResponseField name="field_name" type="object">
  Response field description
</ResponseField>

<!-- Expandable sections -->
<Expandable title="Advanced Options">
  Additional configuration details
</Expandable>
```

#### Media Components
```mdx
<!-- Images (always wrap in Frame) -->
<Frame>
  <img src="/images/example.png" alt="Description" />
</Frame>

<!-- Videos -->
<video controls>
  <source src="/videos/demo.mp4" type="video/mp4" />
</video>

<!-- Embedded content -->
<iframe src="https://example.com" width="100%" height="400px" />
```

## API Integration Details

### Authentication System
```http
# All API requests require authentication header
x-auth-apikey: YOUR_API_KEY
x-auth-scheme: api-token

# Base URL for all endpoints
https://api2.rhombussystems.com
```

### Rate Limiting
- **Standard Limit**: 1000 requests per hour
- **Burst Limit**: 100 requests per minute
- **Headers**: `X-RateLimit-Limit`, `X-RateLimit-Remaining`, `X-RateLimit-Reset`

### Error Handling
```json
{
  "error": {
    "code": "ERROR_CODE",
    "message": "Human-readable error message",
    "details": "Additional context or resolution steps"
  }
}
```

### Common HTTP Status Codes
- **200**: Success
- **400**: Bad Request (invalid parameters)
- **401**: Unauthorized (invalid API key)
- **403**: Forbidden (insufficient permissions)
- **404**: Not Found (resource doesn't exist)
- **429**: Too Many Requests (rate limit exceeded)
- **500**: Internal Server Error

## Brand Guidelines & Styling

### 2024 Rebrand Implementation
**Previous Branding** (Pre-2024):
- Company: "Rhombus Systems"
- Colors: Green theme (#16A34A primary)

**Current Branding** (2024+):
- Company: "Rhombus" (dropped "Systems")
- Colors: Blue theme (#2563EB primary)
- Values: Trust, integrity, friendliness, innovation

### Color Palette
```css
:root {
  --primary: #2563EB;      /* Blue */
  --light: #60A5FA;       /* Light Blue */
  --dark: #1D4ED8;        /* Dark Blue */
}
```

### Typography & Iconography
- **Icons**: Mintlify icon library
- **Fonts**: System fonts optimized for readability
- **Logo**: SVG format with dark/light variants

## File Management & Assets

### Image Guidelines
- **Format**: PNG for screenshots, SVG for logos/icons
- **Location**: `/images/` directory
- **Usage**: Always wrap in `<Frame>` component
- **Naming**: Descriptive, kebab-case filenames

### Logo Assets
- **Dark Theme**: `/logo/dark.svg`
- **Light Theme**: `/logo/light.svg`
- **Favicon**: `/favicon.svg`

### Documentation Assets
- **Screenshots**: Deployment confirmations, UI examples
- **Diagrams**: Architecture and workflow illustrations
- **Hero Images**: Landing page visuals (dark/light variants)

## Deployment & Publishing

### Automatic Deployment
- **Trigger**: Push to default branch
- **Platform**: Mintlify hosting infrastructure
- **Process**: Automatic build and deployment via GitHub app
- **URL**: Custom domain configured in Mintlify dashboard

### Deployment Validation
```bash
# Local validation before deployment
mint dev                    # Test locally
mint broken-links          # Validate all links
git add . && git commit    # Stage changes
git push origin main       # Deploy to production
```

### Monitoring & Maintenance
- **Analytics**: Built-in Mintlify analytics
- **Performance**: Automatic optimization and CDN
- **Updates**: Nightly API spec synchronization
- **Backups**: Git version control and automatic backups

## Integration Examples & Use Cases

### Common Integration Patterns

#### Live Video Streaming
```javascript
// 1. Get camera list
const cameras = await fetch('/api/camera/getMinimalCameraStateList', {
  headers: {'x-auth-apikey': API_KEY}
});

// 2. Create shared stream
const stream = await fetch('/api/camera/createSharedLiveVideoStream', {
  method: 'POST',
  headers: {'x-auth-apikey': API_KEY},
  body: JSON.stringify({cameraUuid: cameraId})
});

// 3. Use stream URL in video player
const streamUrl = stream.streamUrl;
```

#### Event-Driven Workflows
```python
# Real-time event monitoring
import requests

def monitor_events():
    response = requests.post(
        'https://api2.rhombussystems.com/api/event/getPolicyAlertsV2',
        headers={'x-auth-apikey': API_KEY},
        json={'limit': 10, 'includeResolved': False}
    )

    for event in response.json():
        process_security_event(event)
```

#### Access Management Integration
```python
# Sync users with HR system
def sync_user_access():
    # Create user in Rhombus
    user_data = {
        'firstName': 'John',
        'lastName': 'Doe',
        'email': 'john.doe@company.com'
    }

    response = requests.post(
        'https://api2.rhombussystems.com/api/user/createUser',
        headers={'x-auth-apikey': API_KEY},
        json=user_data
    )

    # Assign access credentials
    if response.status_code == 200:
        assign_access_credentials(response.json()['userUuid'])
```

## Support & Community Resources

### Developer Resources
- **API Reference**: Complete endpoint documentation
- **OpenAPI Specification**: Machine-readable API spec
- **Code Examples**: Multi-language integration samples
- **Implementation Guides**: Video player, webhooks, access control

### Community & Support
- **Developer Community**: https://rhombus.community
- **Technical Support**: https://rhombus.com/support
- **API Console**: https://console.rhombussystems.com
- **Documentation Updates**: Automatic nightly synchronization

### Troubleshooting Resources
- **Error Codes**: Comprehensive error documentation
- **Rate Limiting**: Usage monitoring and optimization
- **Authentication**: API key management and security
- **Integration Guides**: Step-by-step implementation examples

## Project Statistics

**Last Updated**: 2025-10-21 21:40 UTC
**Total Endpoints**: 207+
**Total Categories**: 66
**Documentation Files**: Generated from OpenAPI specification
**Update Frequency**: Nightly automated synchronization

This comprehensive documentation serves as the authoritative resource for developers building on the Rhombus security platform, providing everything needed for successful API integration and application development.
